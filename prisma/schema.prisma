generator pgClient {
  provider = "prisma-client-js"
}

datasource dbPG {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

// New models for the new database

model Dealer {
  id        Int     @id @unique @default(autoincrement())
  public_id String  @unique
  active    Boolean @default(true)

  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Dealer info
  fullName           String    @dbPG.VarChar(255)
  registrationNumber Int?      @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSince   DateTime? @dbPG.Date
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text

  // Relations
  customers Customer[]

  salesManagers SalesManager[]

  // Indexes
  @@index([id], name: "idx_dealer_id")
}

model SalesManager {
  id        Int      @id @unique @default(autoincrement())
  publicId  String   @unique
  active    Boolean  @default(true)
  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  fullName           String    @dbPG.VarChar(255)
  birthDate          DateTime? @dbPG.Date
  registrationNumber Int       @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSince   DateTime? @dbPG.Date
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text

  // Relations
  customers Customer[]

  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId Int?
}

model Customer {
  // Customer info
  id        Int      @id @unique @default(autoincrement())
  publicId  String   @unique
  active    Boolean  @default(true)
  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  fullName           String    @dbPG.VarChar(255)
  birthDateD         DateTime? @dbPG.Date
  registrationNumber Int       @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSinceD  DateTime? @dbPG.Date
  salonName          String?   @dbPG.VarChar(255)
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text

  // Relations
  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId Int?

  salesManager          SalesManager? @relation(fields: [salesManagerId], references: [id])
  salesManagerId        Int?
  salesManagerSinceQ    Int?          @default(0)
  salesManagerSinceYear Int?          @default(0)

  accounts Account[]

  // Add indexes for the customer
  @@index([id], name: "idx_customer_id")
  @@index([fullName], name: "idx_customer_full_name")
  @@index([salesManagerId], name: "idx_customer_sales_manager_id")
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

model Transaction {
  id        Int      @id @default(autoincrement())
  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  year        Int
  quarter     Int
  amount      Int
  points      Int             @default(0)
  type        TransactionType
  description String?

  acceptedBonusOrder String?
  sentBonusOrder     String?
  bonusName          String?
  bonusAmount        Int?    @default(0)
  bonusPoints        Int?    @default(0)

  // Define relations
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  bonus   Bonus? @relation(fields: [bonusId], references: [id])
  bonusId Int? 

  // Indexes
  @@index([id], name: "idx_transaction_id")
  @@index([year], name: "idx_transaction_year")
  @@index([quarter], name: "idx_transaction_quarter")
  @@index([accountId], name: "idx_transaction_account_id")
}

model Account {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  balance                 Float @default(0)
  balancePointsCorrection Float @default(0)

  // Define relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  // Define relations
  transactions  Transaction[]
  savingPeriods SavingPeriod[]

  // Indexes
  @@index([id], name: "idx_account_id")
  @@index([customerId], name: "idx_account_customer_id")
}

model SavingPeriod {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  savingStartDate String?
  savingEndDate   String?
  balance         Float

  // Define relations
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  // Indexes
  @@index([id], name: "idx_saving_period_id")
  @@index([accountId], name: "idx_saving_period_account_id")
}

model Bonus {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  description String? @default("")
  points      Int?    @default(0)
  price       Int?    @default(0)

  // Define relations
  transactions Transaction[]

  // Indexes
  @@index([id], name: "idx_bonus_id")
}
