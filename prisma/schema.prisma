generator pgClient {
  provider = "prisma-client-js"
}

datasource dbPG {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

// New models for the new database

model Dealer {
  id        Int    @id @unique @default(autoincrement())
  public_id String @unique
  active    Int    @default(1)

  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Dealer info
  fullName           String    @dbPG.VarChar(255)
  registrationNumber Int?      @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSince   DateTime? @dbPG.Date
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text

  // Relations
  customers Customer[]

  salesManagers SalesManager[]

  // Indexes
  @@index([id], name: "idx_dealer_id")
}

model SalesManager {
  id                 Int       @id @unique @default(autoincrement())
  publicId           String    @unique
  active             Int       @default(1)
  fullName           String    @dbPG.VarChar(255)
  birthDate          DateTime? @dbPG.Date
  registrationNumber Int       @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSince   DateTime? @dbPG.Date
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text

  // Relations
  customers Customer[]

  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId Int?
}

model Customer {
  // Customer info
  id                 Int     @id @unique @default(autoincrement())
  publicId           String  @unique
  active             Int     @default(1)
  fullName           String  @dbPG.VarChar(255)
  birthDate          String? @dbPG.VarChar(50)
  registrationNumber Int     @default(0)
  ico                String  @dbPG.VarChar(40)
  phone              String? @dbPG.VarChar(50)
  email              String? @default("") @dbPG.VarChar(100)
  registratedSince   String? @dbPG.VarChar(50)
  // Salon info
  salonName          String? @dbPG.VarChar(255)
  address            String? @dbPG.VarChar(255)
  town               String? @dbPG.VarChar(255)
  psc                String? @dbPG.VarChar(255)
  note               String? @dbPG.Text

  // Relations
  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId Int?

  salesManager          SalesManager? @relation(fields: [salesManagerId], references: [id])
  salesManagerId        Int?
  salesManagerSinceQ    Int?          @default(0)
  salesManagerSinceYear Int?          @default(0)

  accounts Account[]

  // Add indexes for the customer
  @@index([id], name: "idx_customer_id")
  @@index([fullName], name: "idx_customer_full_name")
  @@index([salesManagerId], name: "idx_customer_sales_manager_id")
}

enum AccountType {
  LIFETIME
  TWO_YEAR_SAVING
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

model Transaction {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  year        Int
  quarter     Int
  amount      Int
  type        TransactionType
  description String?

  acceptedBonusOrder String?
  sentBonusOrder     String?
  bonusName          String?
  bonusAmount        Int?

  // Define relations
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  // Indexes
  @@index([id], name: "idx_transaction_id")
  @@index([year], name: "idx_transaction_year")
  @@index([quarter], name: "idx_transaction_quarter")
  @@index([accountId], name: "idx_transaction_account_id")
}

model Account {
  id        Int         @id @default(autoincrement())
  type      AccountType
  balance   Int         @default(0)
  createdAt DateTime?   @default(now())

  openedAt     DateTime? // Date when the account was opened
  closedAt     DateTime? // Date when the account was closed
  // Define relations
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   Int
  // Define relation to transactions
  transactions Transaction[]

  // Indexes
  @@index([id], name: "idx_account_id")
  @@index([customerId], name: "idx_account_customer_id")
}
