generator pgClient {
  provider = "prisma-client-js"
}

datasource dbPG {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum SavingPeriodStatus {
  ACTIVE
  CLOSED
}

// New models for the new database

model Dealer {
  id     Int     @id @unique @default(autoincrement())
  active Boolean @default(true)

  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Dealer info
  fullName           String    @dbPG.VarChar(255)
  registrationNumber Int?      @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSince   DateTime? @dbPG.Date
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text

  // Relations
  customers     Customer[]
  salesManagers SalesManager[]

  // Indexes
  @@index([id], name: "idx_dealer_id")
}

model SalesManager {
  id        Int      @id @unique @default(autoincrement())
  active    Boolean  @default(true)
  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  fullName           String    @dbPG.VarChar(255)
  birthDate          DateTime? @dbPG.Date
  registrationNumber Int       @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSince   DateTime? @dbPG.Date
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text

  // Relations
  customers Customer[]

  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId Int?
}

model Customer {
  // Customer info
  id        Int      @id @unique @default(autoincrement())
  publicId  String   @unique
  active    Boolean  @default(true)
  // DB ganerated fields for created and updated
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  fullName           String    @dbPG.VarChar(255)
  birthDate          DateTime? @dbPG.Date
  registrationNumber Int       @default(0)
  ico                String?   @dbPG.VarChar(40)
  phone              String?   @dbPG.VarChar(50)
  email              String?   @default("") @dbPG.VarChar(100)
  registratedSince   DateTime? @dbPG.Date
  salonName          String?   @dbPG.VarChar(255)
  address            String?   @dbPG.VarChar(255)
  town               String?   @dbPG.VarChar(255)
  psc                String?   @dbPG.VarChar(255)
  note               String?   @dbPG.Text
  gdpr               Int?      @default(0)

  // Relations
  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId Int?

  salesManager             SalesManager? @relation(fields: [salesManagerId], references: [id])
  salesManagerId           Int?
  salesManagerSinceQ       Int?          @default(0)
  salesManagerSinceYear    Int?          @default(0)
  salesManagerSinceQuarter Int?

  account Account?

  // Add indexes for the customer
  @@index([id], name: "idx_customer_id")
  @@index([fullName], name: "idx_customer_full_name")
  @@index([salesManagerId], name: "idx_customer_sales_manager_id")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  year            Int
  quarter         Int
  quarterDateTime DateTime
  points          Int
  type            TransactionType
  description     String?
  directSale      Boolean @default(false)

  acceptedBonusOrder DateTime?
  sentBonusOrder     DateTime?
  bonusPrice         Int?      @default(0)

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  bonus   Bonus? @relation(fields: [bonusId], references: [id])
  bonusId Int?

  savingPeriod   SavingPeriod? @relation(fields: [savingPeriodId], references: [id])
  savingPeriodId Int?          @default(0)

  @@index([accountId, year, quarter])
  @@index([savingPeriodId])
}

model Account {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  lifetimePoints       Int @default(0)
  currentYearPoints    Int @default(0)
  totalDepositedPoints Int @default(0)
  totalWithdrawnPonits Int @default(0)

  averagePointsBeforeSalesManager Decimal? @default(0) @dbPG.Decimal(10, 2)

  customerId Int      @unique
  customer   Customer @relation(fields: [customerId], references: [id])

  transactions  Transaction[]
  savingPeriods SavingPeriod[]

  @@index([id])
  @@index([customerId])
}

model SavingPeriod {
  id        Int                @id @default(autoincrement())
  status    SavingPeriodStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt

  startYear    Int @default(0)
  startQuarter Int @default(0)
  endYear      Int @default(0)
  endQuarter   Int @default(0)

  startDateTime DateTime
  endDateTime   DateTime

  availablePoints      Int @default(0)
  totalDepositedPoints Int @default(0)
  totalWithdrawnPoints Int @default(0)

  closedAt    DateTime?
  closeReason String?

  account      Account       @relation(fields: [accountId], references: [id])
  accountId    Int
  transactions Transaction[]

  @@index([accountId, status])
  @@index([startYear, startQuarter])
  @@index([endYear, endQuarter])
}

model Bonus {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  description String? @default("")
  points      Int?    @default(0)
  price       Int?    @default(0)

  // Define relations
  transactions Transaction[]

  // Indexes
  @@index([id], name: "idx_bonus_id")
}
